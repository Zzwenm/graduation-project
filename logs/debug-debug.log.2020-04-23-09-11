2020-04-23 09:11:00 [DEBUG](DefaultChannelId              ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] -Dio.netty.machineId: 7c:b0:c2:ff:fe:e9:fe:6c (auto-detected)
2020-04-23 09:11:00 [DEBUG](ByteBufUtil                   ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] -Dio.netty.allocator.type: pooled
2020-04-23 09:11:00 [DEBUG](ByteBufUtil                   ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] -Dio.netty.threadLocalDirectBufferSize: 0
2020-04-23 09:11:00 [DEBUG](ByteBufUtil                   ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] -Dio.netty.maxThreadLocalCharBufferSize: 16384
2020-04-23 09:11:00 [DEBUG](Recycler                      ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] -Dio.netty.recycler.maxCapacityPerThread: 4096
2020-04-23 09:11:00 [DEBUG](Recycler                      ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] -Dio.netty.recycler.maxSharedCapacityFactor: 2
2020-04-23 09:11:00 [DEBUG](Recycler                      ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] -Dio.netty.recycler.linkCapacity: 16
2020-04-23 09:11:00 [DEBUG](Recycler                      ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] -Dio.netty.recycler.ratio: 8
2020-04-23 09:11:00 [DEBUG](AbstractByteBuf               ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] -Dio.netty.buffer.checkAccessible: true
2020-04-23 09:11:00 [DEBUG](AbstractByteBuf               ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] -Dio.netty.buffer.checkBounds: true
2020-04-23 09:11:00 [DEBUG](ResourceLeakDetectorFactory   ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] Loaded default ResourceLeakDetector: io.netty.util.ResourceLeakDetector@5a620f3e
2020-04-23 09:11:00 [DEBUG](CommandHandler                ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] [channel=0x714812cf, [id: 0x3585a0db] (inactive), chid=0x1] channelRegistered()
2020-04-23 09:11:00 [DEBUG](CommandHandler                ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] [channel=0x714812cf, /192.168.0.101:55482 -> aliyun/39.105.201.221:6379, chid=0x1] channelActive()
2020-04-23 09:11:00 [DEBUG](DefaultEndpoint               ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] [channel=0x714812cf, /192.168.0.101:55482 -> aliyun/39.105.201.221:6379, epid=0x1] activateEndpointAndExecuteBufferedCommands 0 command(s) buffered
2020-04-23 09:11:00 [DEBUG](DefaultEndpoint               ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] [channel=0x714812cf, /192.168.0.101:55482 -> aliyun/39.105.201.221:6379, epid=0x1] activating endpoint
2020-04-23 09:11:00 [DEBUG](DefaultEndpoint               ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] [channel=0x714812cf, /192.168.0.101:55482 -> aliyun/39.105.201.221:6379, epid=0x1] flushCommands()
2020-04-23 09:11:00 [DEBUG](DefaultEndpoint               ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] [channel=0x714812cf, /192.168.0.101:55482 -> aliyun/39.105.201.221:6379, epid=0x1] flushCommands() Flushing 0 commands
2020-04-23 09:11:00 [DEBUG](ConnectionWatchdog            ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] [channel=0x714812cf, /192.168.0.101:55482 -> aliyun/39.105.201.221:6379, last known addr=aliyun/39.105.201.221:6379] channelActive()
2020-04-23 09:11:00 [DEBUG](CommandHandler                ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] [channel=0x714812cf, /192.168.0.101:55482 -> aliyun/39.105.201.221:6379, chid=0x1] channelActive() done
2020-04-23 09:11:00 [DEBUG](RedisClient                   ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] Connecting to Redis at aliyun:6379: Success
2020-04-23 09:11:00 [DEBUG](RedisChannelHandler           ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] dispatching command AsyncCommand [type=SELECT, output=StatusOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.AsyncCommand]
2020-04-23 09:11:00 [DEBUG](DefaultEndpoint               ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] [channel=0x714812cf, /192.168.0.101:55482 -> aliyun/39.105.201.221:6379, epid=0x1] write() writeAndFlush command AsyncCommand [type=SELECT, output=StatusOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.AsyncCommand]
2020-04-23 09:11:00 [DEBUG](CommandHandler                ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] [channel=0x714812cf, /192.168.0.101:55482 -> aliyun/39.105.201.221:6379, chid=0x1] write(ctx, AsyncCommand [type=SELECT, output=StatusOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.AsyncCommand], promise)
2020-04-23 09:11:00 [DEBUG](CommandEncoder                ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] [channel=0x714812cf, /192.168.0.101:55482 -> aliyun/39.105.201.221:6379] writing command AsyncCommand [type=SELECT, output=StatusOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.AsyncCommand]
2020-04-23 09:11:00 [DEBUG](DefaultEndpoint               ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] [channel=0x714812cf, /192.168.0.101:55482 -> aliyun/39.105.201.221:6379, epid=0x1] write() done
2020-04-23 09:11:00 [DEBUG](ConnectionWatchdog            ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] [channel=0x714812cf, /192.168.0.101:55482 -> aliyun/39.105.201.221:6379, last known addr=aliyun/39.105.201.221:6379] userEventTriggered(ctx, io.lettuce.core.ConnectionEvents$Activated@2fb81e32)
2020-04-23 09:11:00 [DEBUG](CommandHandler                ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] [channel=0x714812cf, /192.168.0.101:55482 -> aliyun/39.105.201.221:6379, chid=0x1] Received: 34 bytes, 1 commands in the stack
2020-04-23 09:11:00 [DEBUG](CommandHandler                ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] [channel=0x714812cf, /192.168.0.101:55482 -> aliyun/39.105.201.221:6379, chid=0x1] Stack contains: 1 commands
2020-04-23 09:11:00 [DEBUG](RedisStateMachine             ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] Decode AsyncCommand [type=SELECT, output=StatusOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.AsyncCommand]
2020-04-23 09:11:00 [DEBUG](RedisStateMachine             ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] Decoded AsyncCommand [type=SELECT, output=StatusOutput [output=null, error='NOAUTH Authentication required.'], commandType=io.lettuce.core.protocol.AsyncCommand], empty stack: true
2020-04-23 09:11:00 [DEBUG](RedisChannelHandler           ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] close()
2020-04-23 09:11:00 [DEBUG](RedisChannelHandler           ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] closeAsync()
2020-04-23 09:11:00 [DEBUG](DefaultEndpoint               ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] [channel=0x714812cf, /192.168.0.101:55482 -> aliyun/39.105.201.221:6379, epid=0x1] closeAsync()
2020-04-23 09:11:00 [DEBUG](CommandHandler                ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] [channel=0x714812cf, /192.168.0.101:55482 -> aliyun/39.105.201.221:6379, chid=0x1] channelInactive()
2020-04-23 09:11:00 [DEBUG](DefaultEndpoint               ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] [channel=0x714812cf, /192.168.0.101:55482 -> aliyun/39.105.201.221:6379, epid=0x1] deactivating endpoint handler
2020-04-23 09:11:00 [DEBUG](CommandHandler                ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] [channel=0x714812cf, /192.168.0.101:55482 -> aliyun/39.105.201.221:6379, chid=0x1] channelInactive() done
2020-04-23 09:11:00 [DEBUG](ConnectionWatchdog            ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] [channel=0x714812cf, /192.168.0.101:55482 -> aliyun/39.105.201.221:6379, last known addr=aliyun/39.105.201.221:6379] channelInactive()
2020-04-23 09:11:00 [DEBUG](ConnectionWatchdog            ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] [channel=0x714812cf, /192.168.0.101:55482 -> aliyun/39.105.201.221:6379, last known addr=aliyun/39.105.201.221:6379] Reconnect scheduling disabled
2020-04-23 09:11:00 [DEBUG](CommandHandler                ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] [channel=0x714812cf, /192.168.0.101:55482 -> aliyun/39.105.201.221:6379, chid=0x1] channelUnregistered()
2020-04-23 09:11:00 [DEBUG](DispatcherServlet             ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] Failed to complete request: org.springframework.data.redis.RedisConnectionFailureException: Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to aliyun:6379
2020-04-23 09:11:00 [DEBUG](DispatcherServlet             ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] "ERROR" dispatch for GET "/error", parameters={}
2020-04-23 09:11:00 [DEBUG](RequestMappingHandlerMapping  ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2020-04-23 09:11:00 [DEBUG](HttpEntityMethodProcessor     ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json, application/json, application/*+json]
2020-04-23 09:11:00 [DEBUG](HttpEntityMethodProcessor     ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] Writing [{timestamp=Thu Apr 23 09:11:00 GMT+08:00 2020, status=500, error=Internal Server Error, message=Unab (truncated)...]
2020-04-23 09:11:00 [DEBUG](DispatcherServlet             ) [TxId :  , SpanId : ] [ET:,AN:,SN:,CN:,CI:] Exiting from "ERROR" dispatch, status 500
